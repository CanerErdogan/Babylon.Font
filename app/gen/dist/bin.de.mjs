const r={version:Uint32Array,ascender:Float32Array,descender:Float32Array,nChar:Uint32Array,codepoint:Uint32Array,advanceWidth:Float32Array,dataMeta:Uint32Array,szPositions:Uint32Array,szIndices:Uint32Array,szUvs:Uint32Array,szNormals:Uint32Array,positionsElm:Float32Array,indicesElm:Uint32Array,uvsElm:Float32Array,normalsElm:Float32Array};function s(s){return r[s]}function t(r){return s(r).BYTES_PER_ELEMENT}function e(r){return new i(r).parse()}class i{constructor(r){this.byteOffset=0,this.arrayBuffer=r,this.result={},this.nChar=NaN}parse(){for(this.parseField("version",this.result),this.parseField("ascender",this.result),this.parseField("descender",this.result),this.parseField("nChar",this),this.result.chars=[];this.nChar>0;){const r={};this.result.chars.push(r),--this.nChar;const s=this.parseField("codepoint");if(r.name=String.fromCodePoint(s),this.parseField("advanceWidth",r),!(1&this.parseField("dataMeta"))){r.data=null;continue}r.data={};const t=this.parseField("szPositions"),e=this.parseField("szIndices"),i=this.parseField("szUvs"),a=this.parseField("szNormals"),n=r.data;this.parseArrayField("positions",t,n),this.parseArrayField("indices",e,n),this.parseArrayField("uvs",i,n),this.parseArrayField("normals",a,n)}return this.result}parseField(r,e){const i=new(s(r))(this.arrayBuffer,this.byteOffset)[0],a=t(r);return e&&(e[r]=i),this.byteOffset+=a,i}parseArrayField(r,e,i){const a=r.concat("Elm"),n=s(a),h=e/t(a),o=new n(this.arrayBuffer,this.byteOffset,h),l=Array.from(o);return i&&(i[r]=l),this.byteOffset+=e,l}}export{e as deserialize};//# sourceMappingURL=bin.de.mjs.map
