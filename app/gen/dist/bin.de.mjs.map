{"version":3,"file":"bin.de.mjs","sources":["../src/helper/serde/bin/util.js","../src/helper/serde/bin/de.js"],"sourcesContent":["const classTable = {\r\n    version: Uint32Array,\r\n    ascender: Float32Array,\r\n    descender: Float32Array,\r\n    nChar: Uint32Array,\r\n    codepoint: Uint32Array,\r\n    advanceWidth: Float32Array,\r\n    dataMeta: Uint32Array,\r\n    szPositions: Uint32Array, // sz = bytes occupied by array\r\n    szIndices: Uint32Array,\r\n    szUvs: Uint32Array,\r\n    szNormals: Uint32Array,\r\n    positionsElm: Float32Array,\r\n    indicesElm: Uint32Array,\r\n    uvsElm: Float32Array,\r\n    normalsElm: Float32Array\r\n};\r\n\r\n\r\n\r\n\r\nexport function classOf(name) {\r\n    return classTable[name];\r\n}\r\n\r\n\r\n\r\nexport function sizeOf(name) {\r\n    return classOf(name).BYTES_PER_ELEMENT;\r\n}\r\n","import { classOf, sizeOf } from './util.js'\r\n\r\n\r\n\r\nexport function deserialize(arrayBuffer) {\r\n    const parser = new Parser(arrayBuffer);\r\n    const result = parser.parse();\r\n    return result;\r\n}\r\n\r\n\r\n\r\nclass Parser {\r\n    constructor(arrayBuffer) {\r\n        this.byteOffset = 0;\r\n        this.arrayBuffer = arrayBuffer;\r\n        this.result = {};\r\n        this.nChar = NaN;\r\n    }\r\n\r\n    parse() {\r\n        this.parseField('version', this.result);\r\n        this.parseField('ascender', this.result);\r\n        this.parseField('descender', this.result);\r\n        this.parseField('nChar', this);\r\n\r\n        this.result['chars'] = [];\r\n        while (this.nChar > 0) {\r\n            const char = {};\r\n            this.result['chars'].push(char);\r\n            --this.nChar;\r\n\r\n            const cp = this.parseField('codepoint');\r\n            char['name'] = String.fromCodePoint(cp);\r\n\r\n            this.parseField('advanceWidth', char);\r\n\r\n            const meta = this.parseField('dataMeta');\r\n            if (meta & 0x1) {\r\n                char['data'] = {};\r\n            } else {\r\n                char['data'] = null;\r\n                continue;\r\n            }\r\n\r\n            const szPositions = this.parseField('szPositions');\r\n            const szIndices = this.parseField('szIndices');\r\n            const szUvs = this.parseField('szUvs');\r\n            const szNormals = this.parseField('szNormals');\r\n\r\n            const data = char['data'];\r\n            this.parseArrayField('positions', szPositions, data);\r\n            this.parseArrayField('indices', szIndices, data);\r\n            this.parseArrayField('uvs', szUvs, data);\r\n            this.parseArrayField('normals', szNormals, data);\r\n        }\r\n\r\n        return this.result;\r\n    }\r\n\r\n    parseField(name, object) {\r\n        const ABView = classOf(name);\r\n        const view = new ABView(this.arrayBuffer, this.byteOffset);\r\n        const result = view[0];\r\n        const byteAdvanced = sizeOf(name);\r\n        object && (object[name] = result);\r\n        this.byteOffset += byteAdvanced;\r\n        return result;\r\n    }\r\n\r\n    parseArrayField(name, byteLength, object) {\r\n        const queryName = name.concat('Elm');\r\n        const ABView = classOf(queryName);\r\n        const length = byteLength / sizeOf(queryName);\r\n        const view = new ABView(this.arrayBuffer, this.byteOffset, length);\r\n        const result = Array.from(view);\r\n        object && (object[name] = result);\r\n        this.byteOffset += byteLength;\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nfunction get(arrayBuffer, byteOffset, name) {\r\n    const ABView = classOf(name);\r\n    const view = new ABView(arrayBuffer, byteOffset);\r\n    const result = view[0];\r\n    const byteAdvanced = sizeof(name);\r\n    return { result, byteAdvanced }\r\n}\r\n"],"names":["classTable","version","Uint32Array","ascender","Float32Array","descender","nChar","codepoint","advanceWidth","dataMeta","szPositions","szIndices","szUvs","szNormals","positionsElm","indicesElm","uvsElm","normalsElm","classOf","name","sizeOf","BYTES_PER_ELEMENT","deserialize","arrayBuffer","Parser","parse","[object Object]","this","byteOffset","result","NaN","parseField","char","push","cp","String","fromCodePoint","data","parseArrayField","object","byteAdvanced","byteLength","queryName","concat","ABView","length","view","Array","from"],"mappings":"AAAA,MAAMA,EAAa,CACfC,QAASC,YACTC,SAAUC,aACVC,UAAWD,aACXE,MAAOJ,YACPK,UAAWL,YACXM,aAAcJ,aACdK,SAAUP,YACVQ,YAAaR,YACbS,UAAWT,YACXU,MAAOV,YACPW,UAAWX,YACXY,aAAcV,aACdW,WAAYb,YACZc,OAAQZ,aACRa,WAAYb,cAMT,SAASc,EAAQC,GACpB,OAAOnB,EAAWmB,GAKf,SAASC,EAAOD,GACnB,OAAOD,EAAQC,GAAME,kBCxBlB,SAASC,EAAYC,GAGxB,OAFe,IAAIC,EAAOD,GACJE,QAM1B,MAAMD,EACFE,YAAYH,GACRI,KAAKC,WAAa,EAClBD,KAAKJ,YAAcA,EACnBI,KAAKE,OAAS,GACdF,KAAKrB,MAAQwB,IAGjBJ,QAOI,IANAC,KAAKI,WAAW,UAAWJ,KAAKE,QAChCF,KAAKI,WAAW,WAAYJ,KAAKE,QACjCF,KAAKI,WAAW,YAAaJ,KAAKE,QAClCF,KAAKI,WAAW,QAASJ,MAEzBA,KAAKE,OAAc,MAAI,GAChBF,KAAKrB,MAAQ,GAAG,CACnB,MAAM0B,EAAO,GACbL,KAAKE,OAAc,MAAEI,KAAKD,KACxBL,KAAKrB,MAEP,MAAM4B,EAAKP,KAAKI,WAAW,aAM3B,GALAC,EAAW,KAAIG,OAAOC,cAAcF,GAEpCP,KAAKI,WAAW,eAAgBC,KAGrB,EADEL,KAAKI,WAAW,aAGtB,CACHC,EAAW,KAAI,KACf,SAHAA,EAAW,KAAI,GAMnB,MAAMtB,EAAciB,KAAKI,WAAW,eAC9BpB,EAAYgB,KAAKI,WAAW,aAC5BnB,EAAQe,KAAKI,WAAW,SACxBlB,EAAYc,KAAKI,WAAW,aAE5BM,EAAOL,EAAW,KACxBL,KAAKW,gBAAgB,YAAa5B,EAAa2B,GAC/CV,KAAKW,gBAAgB,UAAW3B,EAAW0B,GAC3CV,KAAKW,gBAAgB,MAAO1B,EAAOyB,GACnCV,KAAKW,gBAAgB,UAAWzB,EAAWwB,GAG/C,OAAOV,KAAKE,OAGhBH,WAAWP,EAAMoB,GACb,MAEMV,EADO,IADEX,EAAQC,GACV,CAAWQ,KAAKJ,YAAaI,KAAKC,YAC3B,GACdY,EAAepB,EAAOD,GAG5B,OAFAoB,IAAWA,EAAOpB,GAAQU,GAC1BF,KAAKC,YAAcY,EACZX,EAGXH,gBAAgBP,EAAMsB,EAAYF,GAC9B,MAAMG,EAAYvB,EAAKwB,OAAO,OACxBC,EAAS1B,EAAQwB,GACjBG,EAASJ,EAAarB,EAAOsB,GAC7BI,EAAO,IAAIF,EAAOjB,KAAKJ,YAAaI,KAAKC,WAAYiB,GACrDhB,EAASkB,MAAMC,KAAKF,GAG1B,OAFAP,IAAWA,EAAOpB,GAAQU,GAC1BF,KAAKC,YAAca,EACZZ"}